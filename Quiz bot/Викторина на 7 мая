import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from datetime import datetime
import openpyxl
import random

API_TOKEN = '7009883545:AAHsjbopD1yStF_JL92KkVLiH6NyO3wKnGo'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

questions = [
    {
        "options": ["–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–û–º—Å–∫", "–°–æ–≥–ª–∞—Å–µ–Ω"],
        "scores": [0, 0, 1, 0],
        "correct_index": 2,
        "question": "https://telesco.pe/knqwae/23"
    },
    {
        "options": ["–ï–≤–∞", "–í–∞–ª–ª–∏", "–†–æ–±–æ–∫–æ—Ç—è", "–ë–∏–±–∏"],
        "scores": [0, 1, 0, 0],
        "correct_index": 1,
        "question": "https://telesco.pe/knqwae/40"
    },
    {
        "options": ["–ú–∞—à–∏–Ω—É –≤—Ä–µ–º–µ–Ω–∏", "–ú–µ–∂–≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç–∞–ª", "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫—É", "–®–∫–∞—Ñ"],
        "scores": [1, 0, 0, 0],
        "correct_index": 0,
        "question": "https://telesco.pe/knqwae/33"
    },
    {
        "options": ["–ö–∏–±–µ—Ä—Å—Ç–∞–ª–∫–µ—Ä", "–ö—Ä–µ–º–Ω–∏–µ–≤–∞—è –¥–æ–ª–∏–Ω–∞", "–†–∞–∑—Ä–∞–±—ã", "–í –ø–æ–ª–µ –∑—Ä–µ–Ω–∏—è"],
        "scores": [0, 1, 0, 0],
        "correct_index": 1,
        "question": "https://telesco.pe/knqwae/19"
    },
    {
        "options": ["ENDER", "OASIS", "AVIATO", "ERAGON"],
        "scores": [0, 1, 0, 0],
        "correct_index": 1,
        "question": "https://telesco.pe/knqwae/10"
    },
    {
        "options": ["–†–∞–¥–∏–æ-–≤–æ–ª–Ω–∞", "–ü–æ–ø-–≤–æ–ª–Ω–∞", "–†—ç–ø-–≤–æ–ª–Ω–∞", "–†–æ–∫-–≤–æ–ª–Ω–∞"],
        "scores": [0, 0, 0, 1],
        "correct_index": 3,
        "question": "https://telesco.pe/knqwae/36"
    },
    {
        "options": ["Turbo", "Donald Duck", "Clash", "Trident"],
        "scores": [0, 0, 1, 0],
        "correct_index": 2,
        "question": "https://telesco.pe/knqwae/6"
    },
    {
        "options": ["–ö–∞–ø—É—Ü–∏–Ω", "–î–æ–ª–≥–æ–ø—è—Ç ", "–ï–Ω–æ—Ç", "–õ–µ–º—É—Ä"],
        "scores": [0, 0, 0, 1],
        "correct_index": 3,
        "question": "https://telesco.pe/knqwae/37"
    },
    {
        "options": ["–ú–æ—Å–∫–≤–∞ ", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ß–∏—Ç–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"],
        "scores": [1, 0, 0, 0],
        "correct_index": 0,
        "question": "https://telesco.pe/knqwae/5"
    },
    {
        "options": ["–í–∞–π–±–µ—Ä", "ICQ", "ask.fm", "–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏"],
        "scores": [0, 1, 0, 0],
        "correct_index": 1,
        "question": "https://telesco.pe/knqwae/27"
    },
    {
        "options": ["2012", "2014", "2016", "2013"],
        "scores": [0, 1, 0, 0],
        "correct_index": 1,
        "question": "https://telesco.pe/knqwae/21"
    },
    {
        "options": ["–í–æ–ª–∫ —Å –£–æ–ª–ª-—Å—Ç—Ä–∏—Ç ", "–ö—Ä–æ–≤–∞–≤—ã–π –∞–ª–º–∞–∑", "–¢–∏—Ç–∞–Ω–∏–∫", "–ê–≤–∏–∞—Ç–æ—Ä"],
        "scores": [0, 0, 1, 0],
        "correct_index": 2,
        "question": "https://telesco.pe/knqwae/34"
    },
    {
        "options": ["2014", "2012", "2013", "2008"],
        "scores": [0, 1, 0, 0],
        "correct_index": 1,
        "question": "https://telesco.pe/knqwae/17"
    },
    {
        "options": ["Unified Resourse Language", "User Registration List", "Uniform Resourse Locator", "Universal Remote Locator"],
        "scores": [0, 0, 1, 0],
        "correct_index": 2,
        "question": "https://telesco.pe/knqwae/15"
    },
    {
        "options": ["Sony", "Google", "Xiaomi", "LG"],
        "scores": [0, 1, 0, 0],
        "correct_index": 1,
        "question": "https://telesco.pe/knqwae/14"
    },
    {
        "options": ["Sony", "Microsoft", "Nintendo", "Sega"],
        "scores": [0, 1, 0, 0],
        "correct_index": 1,
        "question": "https://telesco.pe/knqwae/18"
    },
    {
        "options": ["Microsoft", "IBM", "Dell", "Apple"],
        "scores": [0, 1, 0, 0],
        "correct_index": 1,
        "question": "https://telesco.pe/knqwae/29"
    },
    {
        "options": ["–û—Å–Ω–æ–≤–∞ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "–ö–æ–Ω—Ü–µ–ø—Ü–∏—è –∫–≤–∞–Ω—Ç–æ–≤–æ–π —Ñ–∏–∑–∏–∫–∏", "–¢–µ—Ö–Ω–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏"],
        "scores": [0, 1, 0, 0],
        "correct_index": 1,
        "question": "https://telesco.pe/knqwae/8"
    },
    {
        "options": ["1949", "1952", "1960", "1953"],
        "scores": [0, 1, 0, 0],
        "correct_index": 1,
        "question": "https://telesco.pe/knqwae/28"
    },
    {
        "options": ["Sony", "Kodak", "Motorola", "Samsung"],
        "scores": [0, 0, 1, 0],
        "correct_index": 2,
        "question": "https://telesco.pe/knqwae/31"
    },
    {
        "options": ["2009", "2010", "2011", "2012"],
        "scores": [0, 0, 1, 0],
        "correct_index": 2,
        "question": "https://telesco.pe/knqwae/35"
    },
    {
        "options": ["–¶–µ–Ω—Ç—Ä –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", "–¶–µ–Ω—Ç—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –∞–ø–ø–∞—Ä–∞—Ç—É—Ä—ã", "–ù–ò–õ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö –ø—Ä–∏–±–æ—Ä–æ–≤", "–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä –≤—ã—Å–æ–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"],
        "scores": [0, 0, 1, 0],
        "correct_index": 2,
        "question": "https://telesco.pe/knqwae/26"
    },
    {
        "options": ["2", "3", "4", "5"],
        "scores": [0, 1, 0, 0],
        "correct_index": 1,
        "question": "https://telesco.pe/knqwae/30"
    },
    {
        "options": ["–î–∞", "–ù–µ—Ç"],
        "scores": [1, 0],
        "correct_index": 0,
        "question": "https://telesco.pe/knqwae/7"
    },
    {
        "options": ["DOTA 2", "Counter Strike"],
        "scores": [0, 1],
        "correct_index": 1,
        "question": "https://telesco.pe/knqwae/20"
    },
    {
        "options": ["–ú–æ–Ω–∏—Ç–æ—Ä", "–ú—ã—à—å"],
        "scores": [1, 0],
        "correct_index": 0,
        "question": "https://telesco.pe/knqwae/22"
    },
    {
        "options": ["–†–∞–¥–∏–æ", "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"],
        "scores": [1, 0],
        "correct_index": 0,
        "question": "https://telesco.pe/knqwae/41"
    },
    {
        "options": ["GitHub", "Habr"],
        "scores": [1, 0],
        "correct_index": 0,
        "question": "https://telesco.pe/knqwae/3"
    },
    {
        "options": ["frontend", "backend"],
        "scores": [1, 0],
        "correct_index": 0,
        "question": "https://telesco.pe/knqwae/38"
    },
    {
        "options": ["Counter Strike", "The Witcher", "The Witness", "Among us"],
        "scores": [0, 0, 1, 0],
        "correct_index": 2,
        "question": "https://telesco.pe/knqwae/12"
    },
    {
        "options": ["GTA 4", "Call of Duty: Black Ops", "Fallout 4", "Silent Hill 2"],
        "scores": [0, 0, 0, 1],
        "correct_index": 3,
        "question": "https://telesco.pe/knqwae/11"
    },
    {
        "options": ["–§—É–Ω–∫—Ü–∏—è –æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –≤ –∏–≥—Ä–µ", "–°–µ—Ç—å –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤", "–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–µ—Ç—å –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤", "–°–∏—Å—Ç–µ–º–∞ –æ–±–º–µ–Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏"],
        "scores": [0, 0, 1, 0],
        "correct_index": 2,
        "question": "https://telesco.pe/knqwae/16"
    },
    {
        "options": ["Honkai Impact 3rd", "Genshin Impact", "Final Fantasy VII Remake", "Assassin's Creed Valhalla"],
        "scores": [0, 1, 0, 0],
        "correct_index": 1,
        "question": "https://telesco.pe/knqwae/24"
    }
]
user_data = {}
message_id = {}
user_status = {}


class Form(StatesGroup):
    name = State()
    vk = State()
    group = State()
    secret = State()
    check_secret = State()


async def create_excel_file():
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.append(["ID", "–§–ò–û", "–í–ö", "–ì—Ä—É–ø–ø–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤"])
    wb.save("participants.xlsx")


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
try:
    wb = openpyxl.load_workbook("participants.xlsx")
except FileNotFoundError:
    create_excel_file()


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_button = types.KeyboardButton("–ù–∞—á–∞—Ç—å")
    markup.add(start_button)

    if not is_user_registered(message.from_user.id):
        await bot.send_message(message.from_user.id, "–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç üíô\n\n–ú—ã –Ω–∞—á–∏–Ω–∞–µ–º –Ω–∞—à –æ–Ω–ª–∞–π–Ω-–∫–≤–∏–∑! –ù–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å —Ç–µ–±–µ –±—É–¥–µ—Ç –¥–∞–Ω–æ 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–≤–µ—Ç üòâ, —Ç–∞–∫ —á—Ç–æ —É—Å–ø–µ–≤–∞–π!\n\n–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏, –∞ —Å–∞–º—ã–º —Å–æ–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ–¥–∞—Ä–∏–º –ø–∞–º—è—Ç–Ω—ã–µ –ø—Ä–∏–∑—ã ü•≥\n\n–í 16:20 –±—É–¥–µ—Ç –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ üèÜ",
                               parse_mode='HTML',
                               reply_markup=markup
                               )
        video_url = "https://telesco.pe/knqwae/2"  # –í–∏–¥–µ–æ-–∫—Ä—É–∂–æ—á–µ–∫
        await bot.send_video(message.chat.id, video=video_url)
    else:
        await bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ.")


@dp.message_handler()
async def echo_all(message: types.Message):
    if message.text == "–ù–∞—á–∞—Ç—å":
        current_time = datetime.now()
        quiz_start_time = datetime(current_time.year, 5, 7, 13, 30)  # 21 —Ñ–µ–≤—Ä–∞–ª—è, 13:00
        quiz_end_time = datetime(current_time.year, 5, 7, 16, 0)  # 21 —Ñ–µ–≤—Ä–∞–ª—è, 15:00

        if quiz_start_time <= current_time <= quiz_end_time:
            if not is_user_registered(message.from_user.id):
                await bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –§–ò–û 2 —Ä–∞–∑–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
                user_data[message.from_user.id] = {"ID": message.from_user.id, "–§–ò–û": message.from_user.full_name,
                                                   "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤": 0}
                user_status[message.from_user.id] = {}
                await Form.name.set()
            else:
                await bot.send_message(message.from_user.id, "–ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑")
        else:
            await bot.send_message(message.from_user.id, "–î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã")


def is_user_registered(user_id):
    wb = openpyxl.load_workbook("participants.xlsx")
    ws = wb.active
    for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=1, max_col=1):
        if row[0].value == user_id:
            return True
    return False


@dp.message_handler(state=Form.name)
async def process_name_step(message):
    user_data[message.from_user.id]["–§–ò–û"] = message.text
    await Form.next()


@dp.message_handler(state=Form.vk)
async def process_vk_step(message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –í–ö")
    user_data[message.from_user.id]["–í–ö"] = message.text
    await Form.next()


@dp.message_handler(state=Form.group)
async def process_group_step(message, state):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫—É—é –≥—Ä—É–ø–ø—É\n\n–ù–∞–ø—Ä–∏–º–µ—Ä –†–ò-100000")
    user_data[message.from_user.id]["–ì—Ä—É–ø–ø–∞"] = message.text

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await Form.next()


@dp.message_handler(state=Form.secret)
async def process_secret_step(message, state):
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'secret'
    await start_quiz(message.from_user.id)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é, –≥–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞

async def start_quiz(user_id):
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
    random_questions = random.sample(questions, len(questions))
    user_status[user_id]["current_question_index"] = 0
    await send_question(user_id, random_questions[0])
question_messages = {}


async def send_question(chat_id, question_data):
    # –ü–æ–ª—É—á–∞–µ–º URL –≤–∏–¥–µ–æ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    video_url = question_data.get("question")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    question_message = await bot.send_video(chat_id, video=video_url)

    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    if "options" in question_data:
        options = question_data.get("options")
        options_markup = InlineKeyboardMarkup()
        for i, option in enumerate(options):
            callback_data = f"answer_{i}"
            options_markup.add(InlineKeyboardButton(option, callback_data=callback_data))
        options_message = await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:", reply_markup=options_markup)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        question_messages[chat_id] = [question_message.message_id, options_message.message_id]
    else:
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        question_messages[chat_id] = [question_message.message_id]



@dp.callback_query_handler(lambda query: query.data.startswith('answer'))
async def process_answer(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    selected_option_index = int(callback_query.data.split('_')[1])
    current_question_index = user_status[user_id].get("current_question_index", 0)
    question_data = questions[current_question_index]

    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    if "options" in question_data:
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if selected_option_index == question_data["correct_index"]:
            user_data[user_id]["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤"] += question_data["scores"][selected_option_index]

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –±–∞–ª–ª–æ–≤ –≤ —Ñ–∞–π–ª–µ Excel
            await update_excel_points(user_id, user_data[user_id]["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤"])

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        if user_id in question_messages:
            for message_id in question_messages[user_id]:
                await bot.delete_message(user_id, message_id)
            del question_messages[user_id]

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –µ—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã
        if current_question_index + 1 < len(questions):
            user_status[user_id]["current_question_index"] = current_question_index + 1
            await send_question(user_id, questions[current_question_index + 1])
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Excel –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
            await save_to_excel(user_data[user_id])
            await bot.send_video(user_id, "https://telesco.pe/knqwae/25")





async def update_excel_points(user_id, new_points):
    wb = openpyxl.load_workbook("participants.xlsx")
    ws = wb.active
    for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=1, max_col=1):
        if row[0].value == user_id:
            ws.cell(row=row[0].row, column=6, value=new_points)
            break
    wb.save("participants.xlsx")


async def save_to_excel(user_data):
    wb = openpyxl.load_workbook("participants.xlsx")
    ws = wb.active
    user_id = user_data.get("ID", "")
    found_user = False

    for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=1, max_col=1):
        if row[0].value == user_id:
            row[0].offset(column=1).value = user_data.get("–§–ò–û", "")
            row[0].offset(column=2).value = user_data.get("–í–ö", "")
            row[0].offset(column=3).value = user_data.get("–ì—Ä—É–ø–ø–∞", "")
            # Update points only if it's greater than the existing value
            current_points = row[0].offset(column=5).value
            new_points = user_data.get("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤", "")
            if new_points and (not current_points or new_points > current_points):
                row[0].offset(column=5).value = new_points
            found_user = True
            break

    if not found_user:
        new_row = [user_data.get("ID", ""), user_data.get("–§–ò–û", ""), user_data.get("–í–ö", ""), user_data.get("–ì—Ä—É–ø–ø–∞", ""), user_data.get("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤", "")]
        ws.append(new_row)

    wb.save("participants.xlsx")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
