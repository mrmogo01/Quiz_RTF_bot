import telebot
from telebot import types
from datetime import datetime
import openpyxl
import time

bot = telebot.TeleBot('6816304503:AAG9HqBvP5ydJzQB0BHweSm6m8BFRIHd37M')

question_timers = {}
def create_excel_file():
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.append(["ID", "–§–ò–û", "–í–ö", "–°—Ç–∞—Ç—É—Å", "–ì—Ä—É–ø–ø–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤"])
    wb.save("participants.xlsx")


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
try:
    wb = openpyxl.load_workbook("participants.xlsx")
except FileNotFoundError:
    create_excel_file()

questions = [
    {
        "question": "C–∫o–ª—å–∫o –∫a—Ñe–¥p –±—ã–ªo –≤ –òP–òT-PT–§ –≤ –≥o–¥ e–≥o co–∑–¥a–Ω–∏—è?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["1", "3", "4", "7"],
        "scores": [0, 10, 0, 0],
        "correct_index": 1
    },
    {
        "question": "B –∫a–∫o–º –≥o–¥y Pa–¥–∏o—Çex–Ω–∏—áec–∫–∏–π –∏–Ωc—Ç–∏—Ç—É—Ç –øe—Äe–∏–ºe–Ωo–≤a–Ω –≤ –Ω—ã–Ωe –∏–∑–≤ec—Ç–Ω—ã–π –òP–òT-PT–§?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["1996", "2001", "2011", "2020"],
        "scores": [0, 0, 10, 0],
        "correct_index": 2
    },
    {
        "question": "–£–∫a–∂–∏—Çe –Ωa–∑–≤a–Ω–∏e –øep–≤o–π –∏–Ωoc—Çpa–Ω–Ωo–π –∫o–º–øa–Ω–∏–∏, c –∫o—Ço—Äo–π —É –∏–Ωc—Ç–∏—Ç—É—Ça –Ωa–ªa–¥–∏–ªoc—å –Ωa—É—á–Ωoe co—Çp—É–¥–Ω–∏—áec—Ç–≤o\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["Nokia", "Kodak", "Cisco", "Motorola"],
        "scores": [0, 0, 0, 10],
        "correct_index": 3
    },
    {
        "question": "–£–∫a–∂–∏—Çe —Åa–ºoe ""–ºo–ªo–¥oe"" –Ωa–ø—Äa–≤–ªe–Ω–∏e –øo–¥–≥o—Ço–≤–∫–∏ –±a–∫a–ªa–≤po–≤ –≤ –∏–Ωc—Ç–∏—Ç—É—Çe\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏ —É–ø–∞–∫–æ–≤–æ—á–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö"],
        "scores": [0, 10, 0, 0],
        "correct_index": 1
    },
    {
        "question": "–üo c–∫o–ª—å–∫–∏ –øpo–≥pa–º–º –±a–∫a–ªa–≤p–∏a—Ça –ø—Äoxo–¥–∏–ª –Ωa–±op –≤ 2023/2024 —É—áe–±–Ωo–º –≥o–¥—É?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["7", "8", "11", "13"],
        "scores": [0, 10, 0, 0],
        "correct_index": 1
    },
    {
        "question": "C–∫o–ª—å–∫o –Ωa –¥a–Ω–Ω—ã–π –ºo–ºe–Ω—Ç c—É—âec—Ç–≤—Ée—Ç —è–∑—ã–∫o–≤ –ø—Äo–≥pa–º–º–∏po–≤a–Ω–∏—è?\n\n*–†–µ—à–∏ —Ä–µ–±—É—Å –∏ –ø–æ–ª—É—á–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "photo": "proga1.png",
        "options": ["–º–µ–Ω–µ–µ 1000", "–æ–∫–æ–ª–æ 5000", "–æ–∫–æ–ª–æ 6000", "–±–æ–ª–µ–µ 8000"],
        "scores": [0, 0, 0, 10],
        "correct_index": 3
    },
    {
        "question": "Ka–∫ –Ωa–∑—ã–≤ae—Çc—è –øep–≤—ã–π –≤ –º–∏pe –≤—ãco–∫o—Épo–≤–Ωe–≤—ã–π —è–∑—ã–∫ –øpo–≥pa–º–º–∏po–≤a–Ω–∏—è?\n\n*–†–µ—à–∏ —Ä–µ–±—É—Å –∏ –ø–æ–ª—É—á–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "photo": "proga2.png",
        "options": ["–§–æ—Ä—Ç—Ä–∞–Ω", "–ê–¥–∞", "–õ–∏—Å–ø", "–ü–ª–∞–Ω–∫–∞–ª–∫—é–ª—å"],
        "scores": [0, 0, 0, 10],
        "correct_index": 3
    },
    {
        "question": "C –∫a–∫o–≥o —è–∑—ã–∫a –Ωa—áa–ªac—å —Çpa–¥–∏—Ü–∏—è –∏c–øo–ª—å–∑o–≤a–Ω–∏—è —Ñpa–∑—ã ¬´Hello, world!¬ª –≤ —Åa–ºo–π –øe—Ä–≤–æ–π –øpo–≥pa–º–º–µ –øp–∏ –∏–∑—É—áe–Ω–∏–∏ –Ωo–≤o–≥o —è–∑—ã–∫a –øpo–≥pa–º–º–∏po–≤a–Ω–∏—è?\n\n*–†–µ—à–∏ —Ä–µ–±—É—Å –∏ –ø–æ–ª—É—á–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "photo": "proga3.png",
        "options": ["–°–∏", "C#", "C++", "Java"],
        "scores": [10, 0, 0, 0],
        "correct_index": 0
    },
    {
        "question": "Ko–º—É –øp–∏–Ωa–¥–ªe–∂a—Ç —ç—Ç–∏ c–ªo–≤a?\n\nHe c—É—âec—Ç–≤—Ée—Ç —Éc–øe—à–Ω—ãx –ª—é–¥e–π, –∫o—Ç–æp—ãe –Ω–∏–∫o–≥–¥a –≤ –∂–∏–∑–Ω–∏ –Ωe oc—Ç—É–øa–ª–∏c—å –∏ –Ωe –¥o–ø—Éc–∫a–ª–∏ o—à–∏–±–∫–∏. C—É—âec—Ç–≤y—é—Ç —Ço–ª—å–∫o yc–øe—à–Ω—ãe –ª—é–¥–∏, –∫o—Çop—ãe –¥o–øyc–∫a–ª–∏ o—à–∏–±–∫–∏, –Ωo –∑a—Çe–º –∏–∑–ºe–Ω–∏–ª–∏ c–≤–æ–∏ –ø–ªa–Ω—ã, oc–Ωo–≤—ã–≤a—è—Å—å –Ωa –øpo—à–ª—ãx –Ωe—É–¥a—áax. –Ø –∫a–∫ pa–∑ o–¥–∏–Ω –∏–∑ —Ça–∫–∏x –øap–Ωe–π. –Ø –Ωe xo—áy –±—ã—Ç—å —Åa–º—ã–º –±o–≥a—Ç—ã–º —áe–ªo–≤e–∫o–º –Ωa –∫–ªa–¥–±–∏—â–µ.\n\n*–†–µ—à–∏ —Ä–µ–±—É—Å –∏ –ø–æ–ª—É—á–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É\n\n‚ùó–ù–∞–∏–ø–∏—à–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –¢–û–õ–¨–ö–û –ú–ê–õ–ï–ù–¨–ö–ò–ú–ò –ë–£–ö–í–ê–ú–ò",
        "photo": "proga4.png",
        "correct_answer": "–°—Ç–∏–≤ –î–∂–æ–±—Å",
        "scores": 10
    },
    {
        "question": "B —áec—Ç—å —áe–≥o –±—ã–ª –Ωa–∑–≤a–Ω —è–∑—ã–∫ P—Éth–æn?\n\n*–†–µ—à–∏ —Ä–µ–±—É—Å –∏ –ø–æ–ª—É—á–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "photo": "proga5.png",
        "options": ["–§–∞–º–∏–ª–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—è —è–∑—ã–∫–∞", "–ü–∏—Ç–æ–º—Ü–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", "–∫–æ–º–µ–¥–∏–π–Ω–æ–≥–æ —à–æ—É", "–≠—Ç–æ —Å–ª–æ–≤–æ –ø–µ—Ä–≤—ã–º –ø—Ä–∏—à–ª–æ –≤ –≥–æ–ª–æ–≤—É"],
        "scores": [0, 0, 10, 0],
        "correct_index": 2
    },
    {
        "question": "K—Ço –∏–∑ –øepco–Ωa–∂e–π C–ºe—àap–∏–∫o–≤ pa–∑–≥o–≤ap–∏–≤a–ª co Bce–ªe–Ω–Ωo–π?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["–ù—é—à–∞", "–õ–æ—Å—è—à", "–ë–∏–±–∏", "–Å–∂–∏–∫"],
        "scores": [10, 0, 0, 0],
        "correct_index": 1
    },
    {
        "question": "–ß—Ço –Ωaxo–¥–∏—Çc—è –≤ —Üe–Ω—Çpe –≥a–ªa–∫—Ç–∏–∫–∏?\n\n‚ùó–ù–∞–∏–ø–∏—à–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –¢–û–õ–¨–ö–û –ú–ê–õ–ï–ù–¨–ö–ò–ú–ò –ë–£–ö–í–ê–ú–ò",
        "correct_answer": "—á—ë—Ä–Ω–∞—è –¥—ã—Ä–∞",
        "scores": 10
    },
    {
        "question": "Ka–∫ –Ωa–∑—ã–≤ae—Çc—è –ø–ªa–Ωe—Ça –íce–ªe–Ω–Ωo–π –òP–òT-PT–§, –Ωa –∫o—Çopo–π –∂–∏–≤y—Ç —é–Ω—ãe –∑p–∏—Çe–ª–∏?\n\n‚ùó–ù–∞–∏–ø–∏—à–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –¢–û–õ–¨–ö–û –ú–ê–õ–ï–ù–¨–ö–ò–ú–ò –ë–£–ö–í–ê–ú–ò",
        "correct_answer": "–Ω–æ–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ",
        "scores": 10
    },
    {
        "question": "Pacc—Ça–≤—å—Çe –ø–ªa–Ωe—Ç—ã –≤ –øop—è–¥–∫e —É–≤e–ª–∏—áe–Ω–∏—è –∫o–ª–∏—áec—Ç–≤a c–øy—Ç–Ω–∏–∫o–≤\n\n1. –£—Ä–∞–Ω\n2. –Æ–ø–∏—Ç–µ—Ä\n3. –ó–µ–º–ª—è\n4. –ú–∞—Ä—Å\n\n‚ùó–í –æ—Ç–≤–µ—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤",
        "correct_answer": "3412",
        "scores": 10
    },
    {
        "question": "Co–∑–≤e–∑–¥–∏e –∫a–∫o–≥o –∑–Ωa–∫a –∑o–¥–∏a–∫a –∏–∑o–±pa–∂e–Ωo –Ωa –∫ap—Ç–∏–Ω–∫e?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "photo": "stars.jpg",
        "options": ["–†—ã–±", "–ö–æ–∑–µ—Ä–æ–≥–∞", "–û–≤–Ω–∞", "–ó–º–µ–µ–Ω–æ—Å—Ü–∞"],
        "scores": [0, 10, 0, 0],
        "correct_index": 1
    },
    {
        "question": "–û—Ç –∫—É–¥–∞ –¥–∞–Ω–Ω—ã–π –∑–≤—É–∫?\n\n‚ùó–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∏—Ä–∏–ª–∏—Ü–µ–π –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏",
        "audio": "audio1.mp3",
        "correct_answer": "—Ç–µ—Ç—Ä–∏—Å",
        "scores": 10
    },
    {
        "question": "–û—Ç –∫—É–¥–∞ –¥–∞–Ω–Ω—ã–π –∑–≤—É–∫?\n\n‚ùó–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∏—Ä–∏–ª–∏—Ü–µ–π –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏",
        "audio": "audio2.mp3",
        "correct_answer": "–º–∞–π–Ω–∫—Ä–∞—Ñ—Ç",
        "scores": 10
    },
    {
        "question": "–û—Ç –∫—É–¥–∞ –¥–∞–Ω–Ω—ã–π –∑–≤—É–∫?\n\n‚ùó–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∏—Ä–∏–ª–∏—Ü–µ–π –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏",
        "audio": "audio3.mp3",
        "correct_answer": "–º–∞—Ä–∏–æ",
        "scores": 10
    },
    {
        "question": "–û—Ç –∫—É–¥–∞ –¥–∞–Ω–Ω—ã–π –∑–≤—É–∫?\n\n‚ùó–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω—à–ª–∏–π—Å–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏",
        "audio": "audio5.mp3",
        "options": ["–í—ã—Ö–æ–¥ –∏–∑ Discord", "–í—Ö–æ–¥ –≤ Discord", "–í—ã–ª–∫. –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –≤ Discord", "–í–∫–ª. –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –≤ Discord"],
        "scores": [0, 10, 0, 0],
        "correct_index": 1
    }
]


@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_button = types.KeyboardButton("–ù–∞—á–∞—Ç—å")
    markup.add(start_button)

    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç, —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã üëã\n\n"
                          "–°–µ–≥–æ–¥–Ω—è –º—ã –ø—Ä–∞–∑–¥–Ω—É–µ–º –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞ - "
                          "–ò–†–ò–¢-–†–¢–§! –ò –≤ —á–µ—Å—Ç—å —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∫–≤–∏–∑-–≤–∏–∫—Ç–æ—Ä–∏–Ω—É.\n"
                          "–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã: —Å 13:00 –¥–æ 15:00 –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ "
                          "<b>–ò–†–ò–¢-–†–¢–§</b>, –µ–≥–æ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö, –∞ —Ç–∞–∫–∂–µ –æ –∫–æ—Å–º–æ—Å–µ –∏ –æ –º–∏—Ä–µ IT.\n"
                          "–£–¥–∞—á–∏ –≤–∞–º –≤ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –∫–≤–∏–∑–∞ –∏ –ø—É—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç —Å–∞–º—ã–π —É–º–Ω—ã–π –∏ –∑–Ω–∞—é—â–∏–π! ‚òò",
                 parse_mode='HTML',
                 reply_markup=markup
                 )


registered_users = set()  # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    global registered_users

    if message.from_user.id in registered_users:
        return  # –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω

    if message.text == "–ù–∞—á–∞—Ç—å":
        current_time = datetime.now()
        quiz_start_time = datetime(current_time.year, 2, 1, 13, 0)  # 21 —Ñ–µ–≤—Ä–∞–ª—è, 13:00
        quiz_end_time = datetime(current_time.year, 2, 21, 15, 0)  # 21 —Ñ–µ–≤—Ä–∞–ª—è, 15:00

        if quiz_start_time <= current_time <= quiz_end_time:
            if not is_user_registered(message.from_user.id):
                bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –§–ò–û")
                registered_users.add(message.from_user.id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
                # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å"
                bot.register_next_step_handler(message, process_name_step)
            else:
                bot.reply_to(message, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ.")
        else:
            bot.reply_to(message, "–î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã")


def process_name_step(message):
    global user_data
    user_data = {"ID": message.from_user.id, "–§–ò–û": message.text}
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –í–ö.")
    bot.register_next_step_handler(message, process_vk_step)


def process_vk_step(message):
    user_data["–í–ö"] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    status_button_1 = types.KeyboardButton("–®–∫–æ–ª—å–Ω–∏–∫")
    status_button_2 = types.KeyboardButton("–°—Ç—É–¥–µ–Ω—Ç")
    markup.add(status_button_1, status_button_2)
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:", reply_markup=markup)
    bot.register_next_step_handler(message, process_status_step)


def process_status_step(message):
    user_data["–°—Ç–∞—Ç—É—Å"] = message.text
    user_data["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤"] = 0  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–ª–ª–æ–≤
    if message.text == "–°—Ç—É–¥–µ–Ω—Ç":
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫—É—é –≥—Ä—É–ø–ø—É:")
        bot.register_next_step_handler(message, process_group_step)
    else:
        save_to_excel(user_data)
        question_timers[message.chat.id] = time.time()
        send_question(message)

def process_group_step(message):
    user_data["–ì—Ä—É–ø–ø–∞"] = message.text
    save_to_excel(user_data)
    question_timers[message.chat.id] = time.time()
    send_question(message)


def process_secret_step(message):
    global user_data, question_timers
    secret_word = "–†–¢–§"
    if message.text.strip() == secret_word:
        save_to_excel(user_data)
        question_timers[message.chat.id] = time.time()
        send_question(message)
    else:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, process_secret_step)


def save_to_excel(user_data):
    wb = openpyxl.load_workbook("participants.xlsx")
    ws = wb.active
    ws.append([user_data["ID"], user_data["–§–ò–û"], user_data["–í–ö"], user_data["–°—Ç–∞—Ç—É—Å"], user_data.get("–ì—Ä—É–ø–ø–∞", ""), user_data["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤"]])
    wb.save("participants.xlsx")


def is_user_registered(user_id):
    wb = openpyxl.load_workbook("participants.xlsx")
    ws = wb.active
    for row in ws.iter_rows(values_only=True):
        if row[0] == user_id:
            return True
    return False


def send_question(message):
    send_next_question(message, 0)


def send_next_question(message, question_index):
    if question_index < len(questions):
        question = questions[question_index]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        options = [types.KeyboardButton(option) for option in question.get("options", [])]
        markup.add(*options)

        if "photo" in question:
            photo_path = question["photo"]
            with open(photo_path, 'rb') as photo:
                if "audio" in question and question["audio"]:
                    audio_path = question["audio"]
                    with open(audio_path, 'rb') as audio:
                        sent_message = bot.send_photo(message.chat.id, photo, caption=f'–í–æ–ø—Ä–æ—Å {question_index + 1}: {question["question"]}', reply_markup=markup)
                        bot.send_audio(message.chat.id, audio, reply_to_message_id=sent_message.message_id)
                        bot.register_next_step_handler(sent_message, lambda m, q=question_index: check_answer(m, q, sent_message.message_id))
                else:
                    sent_message = bot.send_photo(message.chat.id, photo, caption=f'–í–æ–ø—Ä–æ—Å {question_index + 1}: {question["question"]}', reply_markup=markup)
                    bot.register_next_step_handler(sent_message, lambda m, q=question_index: check_answer(m, q, sent_message.message_id))
        else:
            if "audio" in question and question["audio"]:
                audio_path = question["audio"]
                with open(audio_path, 'rb') as audio:
                    sent_message = bot.send_audio(message.chat.id, audio, caption=f'–í–æ–ø—Ä–æ—Å {question_index + 1}: {question["question"]}', reply_markup=markup)
                    bot.register_next_step_handler(sent_message, lambda m, q=question_index: check_answer(m, q, sent_message.message_id))
            else:
                sent_message = bot.send_message(message.chat.id, f'–í–æ–ø—Ä–æ—Å {question_index + 1}: {question["question"]}', reply_markup=markup)
                bot.register_next_step_handler(sent_message, lambda m, q=question_index: check_answer(m, q, sent_message.message_id))

        question_timers[message.chat.id] = time.time()
    else:
        bot.send_message(message.chat.id, "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.")


def check_time(message):
    global question_timers
    user_id = message.chat.id
    current_time = time.time()
    if user_id in question_timers:
        elapsed_time = current_time - question_timers[user_id]
        if elapsed_time >= 60:
            bot.send_message(user_id, "–í—Ä–µ–º—è –≤—ã—à–ª–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ!")
            bot.delete_message(user_id, message.message_id)
            bot.delete_message(user_id, message.message_id - 1)
            del question_timers[user_id]
            return True
    return False


def check_answer(message, question_index, question_message_id):
    if check_time(message):
        return
    user_answer = message.text
    correct_index = questions[question_index].get("correct_index")
    if correct_index is not None:
        scores = questions[question_index]["scores"]
        if user_answer == questions[question_index]["options"][correct_index]:
            user_data["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤"] += scores[correct_index]
    bot.delete_message(message.chat.id, question_message_id)
    bot.delete_message(message.chat.id, message.message_id)
    update_score_in_excel(user_data["ID"], user_data["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤"])
    send_next_question(message, question_index + 1)


def update_score_in_excel(user_id, new_score):
    wb = openpyxl.load_workbook("participants.xlsx")
    ws = wb.active
    row_index = 0
    for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=1, max_col=1, values_only=True):
        row_index += 1
        if row[0] == user_id:
            cell = ws.cell(row=row_index + 1, column=6)  # Update the score in the 6th column (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤)
            cell.value = new_score
            break
    wb.save("participants.xlsx")


bot.polling()