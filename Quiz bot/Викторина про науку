import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from datetime import datetime
import openpyxl

API_TOKEN = '6883005581:AAHLFdi0xYLMRPLnTcDs3NQuIRk47yGzD4A'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

questions = [
    {
        "question": "–ö–∞–∫–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏ –Ω–µ—Ç –≤ –ò–†–ò–¢-–†–¢–§?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏", "–≠—Ö–æ–≤–∞—è –∫–∞–º–µ—Ä–∞", "–¶–µ–Ω—Ç—Ä –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è VR/AR"],
        "scores": [0, 10, 0, 0],
        "correct_index": 1
    },
    {
        "question": "–†–∞–∑–º–µ—Ä –∫–∞–∫–æ–π —Å—Ç–∏–ø–µ–Ω–¥–∏–∏ 300 —Ç.—Ä.?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è –ê–û ¬´–†–æ—Å—ç–Ω–µ—Ä–≥–æ–∞—Ç–æ–º¬ª", "–°—Ç–∏–ø–µ–Ω–¥–∏—è ""–ê–ª—å—Ñ–∞-—à–∞–Ω—Å""", "–°—Ç–∏–ø–µ–Ω–¥–∏—è –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏", "–°—Ç–∏–ø–µ–Ω–¥–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ En+ group/ –†–£–°–ê–õ"],
        "scores": [0, 10, 0, 0],
        "correct_index": 1
    },
    {
        "question": "–ö–∞–∫–æ–π –∫–æ–Ω–∫—É—Ä—Å –≥—Ä–∞–Ω—Ç–æ–≤ –µ—Å—Ç—å –≤ –£—Ä–§–£?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["–ì–µ–Ω–∏–π", "IT-–ø—Ä–æ—Ä—ã–≤", "–°—Ç–∞—Ä—Ç–∞–ø–µ—Ä", "–£–º–Ω–∏–∫"],
        "scores": [0, 0, 0, 10],
        "correct_index": 3
    },
    {
        "question": "–ö–∞–∫–∞—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ –ò–†–ò–¢-–†–¢–§?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["USBEREIT", "–ò–ù–¢–ï–†", "RadioIT", "InnoCSE"],
        "scores": [0, 10, 0, 0],
        "correct_index": 1
    },
    {
        "question": "–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π –≤ –ò–†–ò–¢-–†–¢–§?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["10", "12", "14", "16"],
        "scores": [0, 0, 10, 0],
        "correct_index": 2
    },
    {
        "question": "–ö–∞–∫ –Ω–∞–∑–≤–∞–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞—É—á–Ω–æ–π —Å—Ç–∞—Ç—å–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–∏–ø–∞?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["IPLAR", "POSTAR", "PIND", "IMRAD"],
        "scores": [0, 0, 0, 10],
        "correct_index": 3
    },
    {
        "question": "–í –∫–∞–∫–æ–º –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –Ω–∞–π—Ç–∏ –Ω–∞—É—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["Dissert Catt", "eLIBRARY.RU", "Google Scholar", "–Ø–Ω–¥–µ–∫—Å"],
        "scores": [10, 0, 0, 0],
        "correct_index": 0
    },
    {
        "question": "–ß—Ç–æ –ø–æ—è–≤–∏–ª–æ—Å—å —Ä–∞–Ω—å—à–µ WI-FI, Bluetooth, Blu-ray –¥–∏—Å–∫, mp3 –ø–ª–µ–µ—Ä?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["WI-FI", "Bluetooth", "Blu-ray –¥–∏—Å–∫", "mp3 –ø–ª–µ–µ—Ä"],
        "scores": [0, 0, 0, 10],
        "correct_index": 3
    },
    {
        "question": "–ö—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è ""–æ—Ç—Ü–æ–º"" –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫ –∏ –ø—Ä–∏–¥—É–º–∞–ª –ø–æ–Ω—è—Ç–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["–ß–∞—Ä–ª—å–∑ –ë—ç–±–±–∏–¥–∂", "–°—Ç–∏–≤ –î–∂–æ–±—Å", "–ö–æ–Ω—Ä–∞–¥ –¶—É–∑–µ", "–ê–ª–∞–Ω –¢—å—é—Ä–∏–Ω–≥"],
        "scores": [0, 0, 0, 10],
        "correct_index": 3
    },
    {
        "question": "–ú—ã –¥–∞–¥–∏–º –≤–∞–º –Ω–∞–±–æ—Ä —Å–ª–æ–≤-–∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π, –∞ –≤–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî —É–≥–∞–¥–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –≤ –º–∏—Ä–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π!\n–î–∞–Ω–Ω—ã–µ, –≥—Ä–∞—Ñ–∏–∫–∏, –ø—Ä–æ–≥–Ω–æ–∑, Excel?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["–°–µ—Ç–µ–≤–æ–π –∏–Ω–∂–µ–Ω–µ—Ä", "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–ê–Ω–∞–ª–∏—Ç–∏–∫"],
        "scores": [0, 0, 0, 10],
        "correct_index": 3
    },
    {
        "question": "–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç –¥–∞–Ω–Ω—ã–π –∫–æ–¥?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "photo": "code.jpg",
        "options": ["–ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è", "–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è", "–ß–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏", "–ß–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 100"],
        "scores": [0, 0, 10, 0],
        "correct_index": 2
    },
    {
        "question": "–ö–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º —Ç–∞–ª–∏—Å–º–∞–Ω–æ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Linux?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["–ö—Ä–æ–ª–∏–∫", "–°–æ–±–∞–∫–∞", "–ü–∏–Ω–≥–≤–∏–Ω"],
        "scores": [0, 0, 10],
        "correct_index": 2
    },
    {
        "question": "–ö–∞–∫–∞—è –º–æ–±–∏–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –≤–Ω–µ–¥—Ä–∏–ª–∞ —ç–º–æ–¥–∑–∏ –Ω–∞ —Å–≤–æ–∏—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["–¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ", "–¢–æ–ª—å–∫–æ –∑–∞–ø–∏—Å—å", "–ó–∞–ø–∏—Å—å –∏ —á—Ç–µ–Ω–∏–µ"],
        "scores": [0, 0, 10],
        "correct_index": 2
    },
    {
        "question": "–ö–∞–∫–æ–π —Ç–∏–ø —Å–µ—Ç–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –æ–±—â–∞—Ç—å—Å—è –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["–ò–Ω—Ç–µ—Ä–Ω–µ—Ç", "–ò–Ω—Ç—Ä–∞–Ω–µ—Ç", "–≠–∫—Å—Ç—Ä–∞–Ω–µ—Ç"],
        "scores": [10, 0, 0],
        "correct_index": 0
    },
    {
        "question": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –±—É–∫–≤–∞ B –≤ —Å–ª–æ–≤–µ ‚ÄúUSB‚Äù?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["Basis", "Bus", "Break"],
        "scores": [0, 10, 0],
        "correct_index": 2
    }
]

user_data = {}
message_id = {}
user_status = {}


class Form(StatesGroup):
    name = State()
    vk = State()
    status = State()
    group = State()
    secret = State()
    check_secret = State()


async def create_excel_file():
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.append(["ID", "–§–ò–û", "–í–ö", "–°—Ç–∞—Ç—É—Å", "–ì—Ä—É–ø–ø–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤"])
    wb.save("participants.xlsx")


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
try:
    wb = openpyxl.load_workbook("participants.xlsx")
except FileNotFoundError:
    create_excel_file()

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_button = types.KeyboardButton("–ù–∞—á–∞—Ç—å")
    markup.add(start_button)

    if not is_user_registered(message.from_user.id):
        await bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç, —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã üëã\n\n"
                                                     "–ú–µ—Å—è—Ü –Ω–∞—É–∫–∏ –ø–æ–¥–æ—à–µ–ª –∫ –∫–æ–Ω—Ü—É, –Ω–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è! –ú—ã –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è –∏ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ –Ω–µ—Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ–± IT –∏ –Ω–∞—É–∫–µ –≤ –ò–†–ò–¢-–†–¢–§!\n\n"
                                                     "‚ùó –ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –º–æ–∂–Ω–æ —Å–µ–≥–æ–¥–Ω—è –¥–æ 17:00, –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ 1 –º–∏–Ω—É—Ç–∞.\n\n"
                                                     "–ò—Ç–æ–≥–∏ –ø–æ–¥–≤–µ–¥–µ–º —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ ¬´–ù–∞—É–∫–∞ –ò–†–ò–¢-–†–¢–§¬ª, –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ https://t.me/+cbGYhdidqKJlYWRi\n\n"
                                                     "–£–¥–∞—á–∏ –≤–∞–º –≤ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –∫–≤–∏–∑–∞ –∏ –ø—É—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç —Å–∞–º—ã–π —É–º–Ω—ã–π –∏ –∑–Ω–∞—é—â–∏–π ‚òò",
                               parse_mode='HTML',
                               reply_markup=markup
                               )
    else:
        await bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ.")


@dp.message_handler()
async def echo_all(message: types.Message):
    if message.text == "–ù–∞—á–∞—Ç—å":
        current_time = datetime.now()
        quiz_start_time = datetime(current_time.year, 3, 3, 12, 0)  # 21 —Ñ–µ–≤—Ä–∞–ª—è, 13:00
        quiz_end_time = datetime(current_time.year, 3, 3, 17, 0)  # 21 —Ñ–µ–≤—Ä–∞–ª—è, 15:00

        if quiz_start_time <= current_time <= quiz_end_time:
            if not is_user_registered(message.from_user.id):
                await bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –§–ò–û")
                user_data[message.from_user.id] = {"ID": message.from_user.id, "–§–ò–û": message.from_user.full_name,
                                                   "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤": 0}
                user_status[message.from_user.id] = {}
                await Form.name.set()
            else:
                await bot.send_message(message.from_user.id, "–ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑")
        else:
            await bot.send_message(message.from_user.id, "–î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã")


def is_user_registered(user_id):
    wb = openpyxl.load_workbook("participants.xlsx")
    ws = wb.active
    for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=1, max_col=1):
        if row[0].value == user_id:
            return True
    return False


@dp.message_handler(state=Form.name)
async def process_name_step(message):
    user_data[message.from_user.id]["–§–ò–û"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –í–ö")
    await Form.next()


@dp.message_handler(state=Form.vk)
async def process_vk_step(message):
    user_data[message.from_user.id]["–í–ö"] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    status_button_1 = types.KeyboardButton("–®–∫–æ–ª—å–Ω–∏–∫")
    status_button_2 = types.KeyboardButton("–°—Ç—É–¥–µ–Ω—Ç")
    markup.add(status_button_1, status_button_2)
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:", reply_markup=markup)
    await Form.next()


@dp.message_handler(state=Form.status)
async def process_status_step(message):
    user_data[message.from_user.id]["–°—Ç–∞—Ç—É—Å"] = message.text
    if message.text == "–°—Ç—É–¥–µ–Ω—Ç":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫—É—é –≥—Ä—É–ø–ø—É\n\n–ù–∞–ø—Ä–∏–º–µ—Ä –†–ò-100000")
        await Form.next()
    else:
        await bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ –†–¢–§")
        await Form.secret.set()


@dp.message_handler(state=Form.group)
async def process_group_step(message):
    user_data[message.from_user.id]["–ì—Ä—É–ø–ø–∞"] = message.text
    await save_to_excel(user_data[message.from_user.id])
    await bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ - –†–¢–§")
    await Form.secret.set()


@dp.message_handler(state=Form.secret)
async def process_secret_step(message, state):
    secret_word = "–†–¢–§"
    if secret_word == message.text.strip():  # –ó–∞–º–µ–Ω–∏—Ç–µ "–≤–∞—à–µ_–∫–æ–¥–æ–≤–æ–µ_—Å–ª–æ–≤–æ" –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ
        await message.answer("–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –ø—Ä–∏–Ω—è—Ç–æ. –ù–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!")
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'secret'
        await start_quiz(message.from_user.id)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é, –≥–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def start_quiz(user_id):
    user_status[user_id]["current_question_index"] = 0
    await send_question(user_id, questions[0])
question_messages = {}
async def send_question(chat_id, question_data):
    question_text = question_data.get("question")
    options = question_data.get("options")
    photo_path = question_data.get("photo")
    audio_path = question_data.get("audio")

    # Send the question text
    question_message = await bot.send_message(chat_id, question_text)
    message_ids = [question_message.message_id]

    # Send the photo if available
    if photo_path:
        photo_message = await bot.send_photo(chat_id, photo=open(photo_path, 'rb'))
        message_ids.append(photo_message.message_id)

    # Send the audio if available
    if audio_path:
        audio_message = await bot.send_audio(chat_id, audio=open(audio_path, 'rb'))
        message_ids.append(audio_message.message_id)

    # Send options if available
    if options:
        options_markup = InlineKeyboardMarkup()
        for i, option in enumerate(options):
            callback_data = f"answer_{i}"
            options_markup.add(InlineKeyboardButton(option, callback_data=callback_data))
        options_message = await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:", reply_markup=options_markup)
        message_ids.append(options_message.message_id)

    question_messages[chat_id] = message_ids


@dp.callback_query_handler(lambda query: query.data.startswith('answer'))
async def process_answer(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    selected_option_index = int(callback_query.data.split('_')[1])
    current_question_index = user_status[user_id].get("current_question_index", 0)
    question_data = questions[current_question_index]

    if selected_option_index == question_data["correct_index"]:
        user_data[user_id]["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤"] += question_data["scores"][selected_option_index]

        # Update the sum of points in the Excel file
        await save_to_excel(user_data[user_id])

    # Delete previous question and options messages
    if user_id in question_messages:
        for message_id in question_messages[user_id]:
            await bot.delete_message(user_id, message_id)
        del question_messages[user_id]

    # Move to the next question or finish the quiz if all questions are answered
    if current_question_index + 1 < len(questions):
        user_status[user_id]["current_question_index"] = current_question_index + 1
        await send_question(user_id, questions[current_question_index + 1])
    else:
        await bot.send_message(user_id, "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã. –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")


async def update_excel_points(user_id, new_points):
    wb = openpyxl.load_workbook("participants.xlsx")
    ws = wb.active
    for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=1, max_col=1):
        if row[0].value == user_id:
            ws.cell(row=row[0].row, column=6, value=new_points)
            break
    wb.save("participants.xlsx")

async def save_to_excel(user_data):
    wb = openpyxl.load_workbook("participants.xlsx")
    ws = wb.active
    new_row = [user_data.get("ID", ""), user_data.get("–§–ò–û", ""), user_data.get("–í–ö", ""),
               user_data.get("–°—Ç–∞—Ç—É—Å", ""), user_data.get("–ì—Ä—É–ø–ø–∞", ""), user_data.get("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤", "")]
    ws.append(new_row)
    wb.save("participants.xlsx")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
