import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from datetime import datetime
import openpyxl

API_TOKEN = '6816304503:AAG9HqBvP5ydJzQB0BHweSm6m8BFRIHd37M'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

questions = [
    {
        "question": "C–∫o–ª—å–∫o –∫a—Ñe–¥p –±—ã–ªo –≤ –òP–òT-PT–§ –≤ –≥o–¥ e–≥o co–∑–¥a–Ω–∏—è?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["1", "3", "4", "7"],
        "scores": [0, 10, 0, 0],
        "correct_index": 1
    },
    {
        "question": "B –∫a–∫o–º –≥o–¥y Pa–¥–∏o—Çex–Ω–∏—áec–∫–∏–π –∏–Ωc—Ç–∏—Ç—É—Ç –øe—Äe–∏–ºe–Ωo–≤a–Ω –≤ –Ω—ã–Ωe –∏–∑–≤ec—Ç–Ω—ã–π –òP–òT-PT–§?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["1996", "2001", "2011", "2020"],
        "scores": [0, 0, 10, 0],
        "correct_index": 2
    },
    {
        "question": "–£–∫a–∂–∏—Çe –Ωa–∑–≤a–Ω–∏e –øep–≤o–π –∏–Ωoc—Çpa–Ω–Ωo–π –∫o–º–øa–Ω–∏–∏, c –∫o—Ço—Äo–π —É –∏–Ωc—Ç–∏—Ç—É—Ça –Ωa–ªa–¥–∏–ªoc—å –Ωa—É—á–Ωoe co—Çp—É–¥–Ω–∏—áec—Ç–≤o\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["Nokia", "Kodak", "Cisco", "Motorola"],
        "scores": [0, 0, 0, 10],
        "correct_index": 3
    },
    {
        "question": "–£–∫a–∂–∏—Çe —Åa–ºoe ""–ºo–ªo–¥oe"" –Ωa–ø—Äa–≤–ªe–Ω–∏e –øo–¥–≥o—Ço–≤–∫–∏ –±a–∫a–ªa–≤po–≤ –≤ –∏–Ωc—Ç–∏—Ç—É—Çe\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏ —É–ø–∞–∫–æ–≤–æ—á–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö"],
        "scores": [0, 10, 0, 0],
        "correct_index": 1
    },
    {
        "question": "–üo c–∫o–ª—å–∫–∏ –øpo–≥pa–º–º –±a–∫a–ªa–≤p–∏a—Ça –ø—Äoxo–¥–∏–ª –Ωa–±op –≤ 2023/2024 —É—áe–±–Ωo–º –≥o–¥—É?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["7", "8", "11", "13"],
        "scores": [0, 10, 0, 0],
        "correct_index": 1
    },
    {
        "question": "C–∫o–ª—å–∫o –Ωa –¥a–Ω–Ω—ã–π –ºo–ºe–Ω—Ç c—É—âec—Ç–≤—Ée—Ç —è–∑—ã–∫o–≤ –ø—Äo–≥pa–º–º–∏po–≤a–Ω–∏—è?\n\n*–†–µ—à–∏ —Ä–µ–±—É—Å –∏ –ø–æ–ª—É—á–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "photo": "proga1.png",
        "options": ["–º–µ–Ω–µ–µ 1000", "–æ–∫–æ–ª–æ 5000", "–æ–∫–æ–ª–æ 6000", "–±–æ–ª–µ–µ 8000"],
        "scores": [0, 0, 0, 10],
        "correct_index": 3
    },
    {
        "question": "Ka–∫ –Ωa–∑—ã–≤ae—Çc—è –øep–≤—ã–π –≤ –º–∏pe –≤—ãco–∫o—Épo–≤–Ωe–≤—ã–π —è–∑—ã–∫ –øpo–≥pa–º–º–∏po–≤a–Ω–∏—è?\n\n*–†–µ—à–∏ —Ä–µ–±—É—Å –∏ –ø–æ–ª—É—á–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "photo": "proga2.png",
        "options": ["–§–æ—Ä—Ç—Ä–∞–Ω", "–ê–¥–∞", "–õ–∏—Å–ø", "–ü–ª–∞–Ω–∫–∞–ª–∫—é–ª—å"],
        "scores": [0, 0, 0, 10],
        "correct_index": 3
    },
    {
        "question": "C –∫a–∫o–≥o —è–∑—ã–∫a –Ωa—áa–ªac—å —Çpa–¥–∏—Ü–∏—è –∏c–øo–ª—å–∑o–≤a–Ω–∏—è —Ñpa–∑—ã ¬´Hello, world!¬ª –≤ —Åa–ºo–π –øe—Ä–≤–æ–π –øpo–≥pa–º–º–µ –øp–∏ –∏–∑—É—áe–Ω–∏–∏ –Ωo–≤o–≥o —è–∑—ã–∫a –øpo–≥pa–º–º–∏po–≤a–Ω–∏—è?\n\n*–†–µ—à–∏ —Ä–µ–±—É—Å –∏ –ø–æ–ª—É—á–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "photo": "proga3.png",
        "options": ["–°–∏", "C#", "C++", "Java"],
        "scores": [10, 0, 0, 0],
        "correct_index": 0
    },
    {
        "question": "Ko–º—É –øp–∏–Ωa–¥–ªe–∂a—Ç —ç—Ç–∏ c–ªo–≤a?\n\nHe c—É—âec—Ç–≤—Ée—Ç —Éc–øe—à–Ω—ãx –ª—é–¥e–π, –∫o—Ç–æp—ãe –Ω–∏–∫o–≥–¥a –≤ –∂–∏–∑–Ω–∏ –Ωe oc—Ç—É–øa–ª–∏c—å –∏ –Ωe –¥o–ø—Éc–∫a–ª–∏ o—à–∏–±–∫–∏. C—É—âec—Ç–≤y—é—Ç —Ço–ª—å–∫o yc–øe—à–Ω—ãe –ª—é–¥–∏, –∫o—Çop—ãe –¥o–øyc–∫a–ª–∏ o—à–∏–±–∫–∏, –Ωo –∑a—Çe–º –∏–∑–ºe–Ω–∏–ª–∏ c–≤–æ–∏ –ø–ªa–Ω—ã, oc–Ωo–≤—ã–≤a—è—Å—å –Ωa –øpo—à–ª—ãx –Ωe—É–¥a—áax. –Ø –∫a–∫ pa–∑ o–¥–∏–Ω –∏–∑ —Ça–∫–∏x –øap–Ωe–π. –Ø –Ωe xo—áy –±—ã—Ç—å —Åa–º—ã–º –±o–≥a—Ç—ã–º —áe–ªo–≤e–∫o–º –Ωa –∫–ªa–¥–±–∏—â–µ.\n\n*–†–µ—à–∏ —Ä–µ–±—É—Å –∏ –ø–æ–ª—É—á–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "photo": "proga4.png",
        "options": ["–ë–∏–ª–ª –ì–µ–π—Ç—Å", "–°—Ç–∏–≤ –î–∂–æ–±—Å", "–≠–ª–æ–Ω –ú–∞—Å–∫", "–£–æ—Ä—Ä–µ–Ω –ë–∞—Ñ—Ñ–µ—Ç"],
        "scores": [0, 10, 0, 0],
        "correct_index": 1
    },
    {
        "question": "B —áec—Ç—å —áe–≥o –±—ã–ª –Ωa–∑–≤a–Ω —è–∑—ã–∫ P—Éth–æn?\n\n*–†–µ—à–∏ —Ä–µ–±—É—Å –∏ –ø–æ–ª—É—á–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "photo": "proga5.png",
        "options": ["–§–∞–º–∏–ª–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—è —è–∑—ã–∫–∞", "–ü–∏—Ç–æ–º—Ü–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", "–∫–æ–º–µ–¥–∏–π–Ω–æ–≥–æ —à–æ—É", "–≠—Ç–æ —Å–ª–æ–≤–æ –ø–µ—Ä–≤—ã–º –ø—Ä–∏—à–ª–æ –≤ –≥–æ–ª–æ–≤—É"],
        "scores": [0, 0, 10, 0],
        "correct_index": 2
    },
    {
        "question": "K—Ço –∏–∑ –øepco–Ωa–∂e–π C–ºe—àap–∏–∫o–≤ pa–∑–≥o–≤ap–∏–≤a–ª co Bce–ªe–Ω–Ωo–π?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["–ù—é—à–∞", "–õ–æ—Å—è—à", "–ë–∏–±–∏", "–Å–∂–∏–∫"],
        "scores": [10, 0, 0, 0],
        "correct_index": 0
    },
    {
        "question": "–ß—Ço –Ωaxo–¥–∏—Çc—è –≤ —Üe–Ω—Çpe –≥a–ªa–∫—Ç–∏–∫–∏?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["–ú–ª–µ—á–Ω—ã–π –ø—É—Ç—å", "–ê–∫—Ç–∏–≤–Ω–æ–µ —è–¥—Ä–æ –≥–∞–ª–∞–∫—Ç–∏–∫–∏", "–ß–µ—Ä–Ω–∞—è –¥—ã—Ä–∞", "–ì–∏–≥–∞–Ω—Ç—Å–∫–∞—è –∑–≤–µ–∑–¥–∞"],
        "scores": [0, 0, 10, 0],
        "correct_index": 2
    },
    {
        "question": "Ka–∫ –Ωa–∑—ã–≤ae—Çc—è –ø–ªa–Ωe—Ça –íce–ªe–Ω–Ωo–π –òP–òT-PT–§, –Ωa –∫o—Çopo–π –∂–∏–≤y—Ç —é–Ω—ãe –∑p–∏—Çe–ª–∏?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["–ö–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä—ã", "–ù–æ–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ", "–í—Å–µ–ª–µ–Ω–Ω–∞—è –ò–†–ò–¢-–†–¢–§", "–ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª–∏"],
        "scores": [0, 0, 10, 0],
        "correct_index": 2
    },
    {
        "question": "Pacc—Ça–≤—å—Çe –ø–ªa–Ωe—Ç—ã –≤ –øop—è–¥–∫e —É–≤e–ª–∏—áe–Ω–∏—è –∫o–ª–∏—áec—Ç–≤a c–øy—Ç–Ω–∏–∫o–≤\n\n1. –£—Ä–∞–Ω\n2. –Æ–ø–∏—Ç–µ—Ä\n3. –ó–µ–º–ª—è\n4. –ú–∞—Ä—Å\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "options": ["2431", "3412", "4123", "2143"],
        "scores": [0, 10, 0, 0],
        "correct_index": 1
    },
    {
        "question": "Co–∑–≤e–∑–¥–∏e –∫a–∫o–≥o –∑–Ωa–∫a –∑o–¥–∏a–∫a –∏–∑o–±pa–∂e–Ωo –Ωa –∫ap—Ç–∏–Ω–∫e?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "photo": "stars.jpg",
        "options": ["–†—ã–±", "–ö–æ–∑–µ—Ä–æ–≥–∞", "–û–≤–Ω–∞", "–ó–º–µ–µ–Ω–æ—Å—Ü–∞"],
        "scores": [0, 10, 0, 0],
        "correct_index": 1
    },
    {
        "question": "–û—Ç –∫—É–¥–∞ –¥–∞–Ω–Ω—ã–π –∑–≤—É–∫?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "audio": "audio1.mp3",
        "options": ["–∑–≤—É–∫ –≥–æ—Ç–æ–≤–æ–π —Å—Ç—Ä–æ—á–∫–∏ –≤ –¢–µ—Ç—Ä–∏—Å–µ", "–∑–≤—É–∫ –ø–æ–±–µ–¥—ã –≤ –°–∞–ø–µ—Ä–µ", "–∑–≤—É–∫ –ø–æ–±–µ–¥—ã –≤ —Å–æ–ª–∏—Ç–µ—Ä–µ", "–∑–≤—É–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—á–∫–æ–≤ –≤ –°–∞–ø–µ—Ä–µ"],
        "scores": [10, 0, 0, 0],
        "correct_index": 0
    },
    {
        "question": "–û—Ç –∫—É–¥–∞ –¥–∞–Ω–Ω—ã–π –∑–≤—É–∫?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "audio": "audio2.mp3",
        "options": ["–∑–≤—É–∫ –∫–æ–ø–∞–Ω–∏—è –∑–µ–º–ª–∏ –≤ –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç–µ", "–∑–≤—É–∫ —â–µ—Ç–æ—á–∫–∏ –æ –∫–æ–º–ø—å—é—Ç–µ—Ä", "–∑–≤—É–∫ —à—É—Ä—à–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞", "–∑–≤—É–∫ —Ä–∞—Å–ø–ª–µ—Å–∫–∏–≤–∞–Ω–∏—è –≥—Ä—è–∑–∏"],
        "scores": [10, 0, 0, 0],
        "correct_index": 0
    },
    {
        "question": "–û—Ç –∫—É–¥–∞ –¥–∞–Ω–Ω—ã–π –∑–≤—É–∫?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "audio": "audio3.mp3",
        "options": ["–ó–∞–≥—Ä—É–∑–æ—á—ã–π —ç–∫—Ä–∞–Ω Mario", "–ó–∞–≥—Ä—É–∑–æ—á—ã–π —ç–∫—Ä–∞–Ω –¢–µ—Ç—Ä–∏—Å", "–ó–∞–≥—Ä—É–∑–æ—á—ã–π —ç–∫—Ä–∞–Ω Pacman", "–ó–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç"],
        "scores": [10, 0, 0, 0],
        "correct_index": 0
    },
{
        "question": "–û—Ç –∫—É–¥–∞ –¥–∞–Ω–Ω—ã–π –∑–≤—É–∫?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "audio": "audio4.mp3",
        "options": ["–ó–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω Hay Day", "–†–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ –≤ –°–∏–º—Å 3", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ê–≤–∞—Ç–∞—Ä–∏–∏", "–ó–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω–∞ Homescapes"],
        "scores": [10, 0, 0, 0],
        "correct_index": 0
    },
    {
        "question": "–û—Ç –∫—É–¥–∞ –¥–∞–Ω–Ω—ã–π –∑–≤—É–∫?\n\n‚ùó–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞üëá",
        "audio": "audio5.mp3",
        "options": ["–í—ã—Ö–æ–¥ –∏–∑ Discord", "–í—Ö–æ–¥ –≤ Discord", "–í—ã–ª–∫. –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –≤ Discord", "–í–∫–ª. –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –≤ Discord"],
        "scores": [0, 10, 0, 0],
        "correct_index": 1
    }
]

user_data = {}
message_id = {}
user_status = {}


class Form(StatesGroup):
    name = State()
    vk = State()
    status = State()
    group = State()
    secret = State()
    check_secret = State()


async def create_excel_file():
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.append(["ID", "–§–ò–û", "–í–ö", "–°—Ç–∞—Ç—É—Å", "–ì—Ä—É–ø–ø–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤"])
    wb.save("participants.xlsx")


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
try:
    wb = openpyxl.load_workbook("participants.xlsx")
except FileNotFoundError:
    create_excel_file()

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_button = types.KeyboardButton("–ù–∞—á–∞—Ç—å")
    markup.add(start_button)

    if not is_user_registered(message.from_user.id):
        await bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç, —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã üëã\n\n"
                                                     "–°–µ–≥–æ–¥–Ω—è –º—ã –ø—Ä–∞–∑–¥–Ω—É–µ–º –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞ - "
                                                     "–ò–†–ò–¢-–†–¢–§! –ò –≤ —á–µ—Å—Ç—å —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∫–≤–∏–∑-–≤–∏–∫—Ç–æ—Ä–∏–Ω—É.\n\n"
                                                     "–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã: —Å 13:00 –¥–æ 16  :00 –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ "
                                                     "<b>–ò–†–ò–¢-–†–¢–§</b>, –µ–≥–æ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö, –∞ —Ç–∞–∫–∂–µ –æ –∫–æ—Å–º–æ—Å–µ –∏ –æ –º–∏—Ä–µ IT.\n\n"
                                                     "–£–¥–∞—á–∏ –≤–∞–º –≤ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –∫–≤–∏–∑–∞ –∏ –ø—É—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç —Å–∞–º—ã–π —É–º–Ω—ã–π –∏ –∑–Ω–∞—é—â–∏–π ‚òò\n\n"
                                                     "‚ùó –í—Ä–µ–º—è –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å = 1 –º–∏–Ω—É—Ç–∞ ",
                               parse_mode='HTML',
                               reply_markup=markup
                               )
    else:
        await bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ.")


@dp.message_handler()
async def echo_all(message: types.Message):
    if message.text == "–ù–∞—á–∞—Ç—å":
        current_time = datetime.now()
        quiz_start_time = datetime(current_time.year, 2, 21, 13, 0)  # 21 —Ñ–µ–≤—Ä–∞–ª—è, 13:00
        quiz_end_time = datetime(current_time.year, 2, 21, 16, 0)  # 21 —Ñ–µ–≤—Ä–∞–ª—è, 15:00

        if quiz_start_time <= current_time <= quiz_end_time:
            if not is_user_registered(message.from_user.id):
                await bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –§–ò–û")
                user_data[message.from_user.id] = {"ID": message.from_user.id, "–§–ò–û": message.from_user.full_name,
                                                   "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤": 0}
                user_status[message.from_user.id] = {}
                await Form.name.set()
            else:
                await bot.send_message(message.from_user.id, "–ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑")
        else:
            await bot.send_message(message.from_user.id, "–î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã")


def is_user_registered(user_id):
    wb = openpyxl.load_workbook("participants.xlsx")
    ws = wb.active
    for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=1, max_col=1):
        if row[0].value == user_id:
            return True
    return False


@dp.message_handler(state=Form.name)
async def process_name_step(message):
    user_data[message.from_user.id]["–§–ò–û"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –í–ö")
    await Form.next()


@dp.message_handler(state=Form.vk)
async def process_vk_step(message):
    user_data[message.from_user.id]["–í–ö"] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    status_button_1 = types.KeyboardButton("–®–∫–æ–ª—å–Ω–∏–∫")
    status_button_2 = types.KeyboardButton("–°—Ç—É–¥–µ–Ω—Ç")
    markup.add(status_button_1, status_button_2)
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:", reply_markup=markup)
    await Form.next()


@dp.message_handler(state=Form.status)
async def process_status_step(message):
    user_data[message.from_user.id]["–°—Ç–∞—Ç—É—Å"] = message.text
    if message.text == "–°—Ç—É–¥–µ–Ω—Ç":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫—É—é –≥—Ä—É–ø–ø—É\n\n–ù–∞–ø—Ä–∏–º–µ—Ä –†–ò-100000")
        await Form.next()
    else:
        await bot.send_message(message.chat.id, "–¥–õ—è —Ç–æ–≥–æ, —á—Ç–û–±—ã –Ω–∞—á–∞—Ç—å –≤–≤–∏–∫—Ç–û—Ä–∏–Ω—É, –≤–í–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ –°–ª–æ–≤–æ")
        await Form.secret.set()


@dp.message_handler(state=Form.group)
async def process_group_step(message):
    user_data[message.from_user.id]["–ì—Ä—É–ø–ø–∞"] = message.text
    await save_to_excel(user_data[message.from_user.id])
    await bot.send_message(message.chat.id, "–¥–õ—è —Ç–æ–≥–æ, —á—Ç–û–±—ã –Ω–∞—á–∞—Ç—å –≤–≤–∏–∫—Ç–û—Ä–∏–Ω—É, –≤–í–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ –°–ª–æ–≤–æ")
    await Form.secret.set()


@dp.message_handler(state=Form.secret)
async def process_secret_step(message, state):
    secret_word = "–°–ª–æ–≤–æ"
    if secret_word == message.text.strip():  # –ó–∞–º–µ–Ω–∏—Ç–µ "–≤–∞—à–µ_–∫–æ–¥–æ–≤–æ–µ_—Å–ª–æ–≤–æ" –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ
        await message.answer("–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –ø—Ä–∏–Ω—è—Ç–æ. –ù–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!")
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'secret'
        await start_quiz(message.from_user.id)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é, –≥–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def start_quiz(user_id):
    user_status[user_id]["current_question_index"] = 0
    await send_question(user_id, questions[0])
question_messages = {}
async def send_question(chat_id, question_data):
    question_text = question_data.get("question")
    options = question_data.get("options")
    photo_path = question_data.get("photo")
    audio_path = question_data.get("audio")

    # Send the question text
    question_message = await bot.send_message(chat_id, question_text)
    message_ids = [question_message.message_id]

    # Send the photo if available
    if photo_path:
        photo_message = await bot.send_photo(chat_id, photo=open(photo_path, 'rb'))
        message_ids.append(photo_message.message_id)

    # Send the audio if available
    if audio_path:
        audio_message = await bot.send_audio(chat_id, audio=open(audio_path, 'rb'))
        message_ids.append(audio_message.message_id)

    # Send options if available
    if options:
        options_markup = InlineKeyboardMarkup()
        for i, option in enumerate(options):
            callback_data = f"answer_{i}"
            options_markup.add(InlineKeyboardButton(option, callback_data=callback_data))
        options_message = await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:", reply_markup=options_markup)
        message_ids.append(options_message.message_id)

    question_messages[chat_id] = message_ids


@dp.callback_query_handler(lambda query: query.data.startswith('answer'))
async def process_answer(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    selected_option_index = int(callback_query.data.split('_')[1])
    current_question_index = user_status[user_id].get("current_question_index", 0)
    question_data = questions[current_question_index]

    if selected_option_index == question_data["correct_index"]:
        user_data[user_id]["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤"] += question_data["scores"][selected_option_index]

        # Update the sum of points in the Excel file
        await save_to_excel(user_data[user_id])

    # Delete previous question and options messages
    if user_id in question_messages:
        for message_id in question_messages[user_id]:
            await bot.delete_message(user_id, message_id)
        del question_messages[user_id]

    # Move to the next question or finish the quiz if all questions are answered
    if current_question_index + 1 < len(questions):
        user_status[user_id]["current_question_index"] = current_question_index + 1
        await send_question(user_id, questions[current_question_index + 1])
    else:
        await bot.send_message(user_id, "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã. –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")


async def update_excel_points(user_id, new_points):
    wb = openpyxl.load_workbook("participants.xlsx")
    ws = wb.active
    for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=1, max_col=1):
        if row[0].value == user_id:
            ws.cell(row=row[0].row, column=6, value=new_points)
            break
    wb.save("participants.xlsx")

async def save_to_excel(user_data):
    wb = openpyxl.load_workbook("participants.xlsx")
    ws = wb.active
    new_row = [user_data.get("ID", ""), user_data.get("–§–ò–û", ""), user_data.get("–í–ö", ""),
               user_data.get("–°—Ç–∞—Ç—É—Å", ""), user_data.get("–ì—Ä—É–ø–ø–∞", ""), user_data.get("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤", "")]
    ws.append(new_row)
    wb.save("participants.xlsx")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)9
